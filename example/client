#!/usr/bin/python3

import websocketd

class Client:
	'This class is similar to Rpc in the server.'
	def __init__(self, remote):
		'''remote and server are the same object.'''
		# Call a function with an argument. 
		ret = remote.test1('an argument')
		print('test1 returned %s' % ret)
	def quit(self):
		'This function is called by the server.'
		print('quit called; ending loop')
		websocketd.endloop()

# Connect to the server, using the Client class for the callback.
# Exactly one object of the Client class is instanced.
# Encryption is used by default, but the server doesn't use it, so it must be
# explicitly disabled.
server = websocketd.RPC(1234, Client, tls = False)

# Using event() makes an asynchronous call; it continues immediately and does
# not wait for a reply.
server.test2.event()

# Start the main loop.
websocketd.fgloop()
