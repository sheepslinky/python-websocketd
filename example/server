#!/usr/bin/python3
# vim: set fileencoding=utf-8 foldmethod=marker :

# {{{ Copyright 2013-2016 Bas Wijnen <wijnen@debian.org>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# }}}

import websocketd
from gi.repository import GLib

class Rpc:
	'An object of this class is instanced for every accepted WebSocket.'
	def __init__(self, remote):
		'remote is an object like this one, to call remote functions on.'
		self.remote = remote
	def test1(self, argument):
		'This function is called from the client.'
		print('test1 called with %s' % argument)
		# Return a value.
		return 'a value'
	def test2(self):
		'This function is called from the client and makes a call to the client.'
		print('test2 called; sending quit in two seconds.')
		GLib.timeout_add_seconds(2, self.remote.quit)

# Run the server on port 1234, serving html pages from the current directory.
# The Rpc class is used for handling WebSockets.
# Note that the server defaults to https connections; for this example,
# encryptions is not used.  This is done by adding 'ths = False' as an
# argument.
# In normal use, encryption should almost always be used.  The network module
# automatically generates an encryption key for you and puts it in
# ~/.local/share/network/.  If you need a certificate for your encryption key,
# see http://letsencrypt.org.
server = websocketd.RPChttpd(1234, Rpc, httpdirs = ('.',), tls = False)

# Tell the user that things are set up.
websocketd.log('running')

# Run the main loop.
websocketd.fgloop()
